//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.1-05/30/2003 05:06 AM(java_re)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2003.07.30 at 06:15:01 EDT 
//


package com.perpetual.rp.util.jaxb;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.perpetual.rp.util.jaxb package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends com.perpetual.rp.util.jaxb.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap();
    public final static java.lang.Class version = (com.perpetual.rp.util.jaxb.impl.JAXBVersion.class);

    static {
        defaultImplementations.put("com.perpetual.rp.util.jaxb.CollectionCriteria", "com.perpetual.rp.util.jaxb.impl.CollectionCriteriaImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.ServiceDomain", "com.perpetual.rp.util.jaxb.impl.ServiceDomainImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.VendorCriterion", "com.perpetual.rp.util.jaxb.impl.VendorCriterionImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.FacilityList", "com.perpetual.rp.util.jaxb.impl.FacilityListImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.HostName", "com.perpetual.rp.util.jaxb.impl.HostNameImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.ServiceDomainList", "com.perpetual.rp.util.jaxb.impl.ServiceDomainListImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.RecordProcessorConfig", "com.perpetual.rp.util.jaxb.impl.RecordProcessorConfigImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.Selected", "com.perpetual.rp.util.jaxb.impl.SelectedImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.Host", "com.perpetual.rp.util.jaxb.impl.HostImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.HostList", "com.perpetual.rp.util.jaxb.impl.HostListImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.Severity", "com.perpetual.rp.util.jaxb.impl.SeverityImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.SummaryCollection", "com.perpetual.rp.util.jaxb.impl.SummaryCollectionImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.VendorCriteria", "com.perpetual.rp.util.jaxb.impl.VendorCriteriaImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.SeverityList", "com.perpetual.rp.util.jaxb.impl.SeverityListImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.Facility", "com.perpetual.rp.util.jaxb.impl.FacilityImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.IntervalValue", "com.perpetual.rp.util.jaxb.impl.IntervalValueImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.CollectionIntervalValue", "com.perpetual.rp.util.jaxb.impl.CollectionIntervalValueImpl");
        defaultImplementations.put("com.perpetual.rp.util.jaxb.LastCollectionDate", "com.perpetual.rp.util.jaxb.impl.LastCollectionDateImpl");
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.perpetual.rp.util.jaxb
     * 
     */
    public ObjectFactory() {
        super(new com.perpetual.rp.util.jaxb.ObjectFactory.GrammarInfoImpl());
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface the Class object of the javacontent interface to instantiate
     * @return a new instance
     * @throws JAXBException if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name the name of the property to retrieve
     * @return the value of the requested property
     * @throws PropertyException when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name the name of the property to retrieve
     * @param value the value of the property to be set
     * @throws PropertyException when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of CollectionCriteria
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.CollectionCriteria createCollectionCriteria()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.CollectionCriteriaImpl();
    }

    /**
     * Create an instance of ServiceDomain
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.ServiceDomain createServiceDomain()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.ServiceDomainImpl();
    }

    /**
     * Create an instance of VendorCriterion
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.VendorCriterion createVendorCriterion()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.VendorCriterionImpl();
    }

    /**
     * Create an instance of FacilityList
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.FacilityList createFacilityList()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.FacilityListImpl();
    }

    /**
     * Create an instance of HostName
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.HostName createHostName()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.HostNameImpl();
    }

    /**
     * Create an instance of ServiceDomainList
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.ServiceDomainList createServiceDomainList()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.ServiceDomainListImpl();
    }

    /**
     * Create an instance of RecordProcessorConfig
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.RecordProcessorConfig createRecordProcessorConfig()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.RecordProcessorConfigImpl();
    }

    /**
     * Create an instance of Selected
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.Selected createSelected()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.SelectedImpl();
    }

    /**
     * Create an instance of Host
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.Host createHost()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.HostImpl();
    }

    /**
     * Create an instance of HostList
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.HostList createHostList()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.HostListImpl();
    }

    /**
     * Create an instance of Severity
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.Severity createSeverity()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.SeverityImpl();
    }

    /**
     * Create an instance of SummaryCollection
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.SummaryCollection createSummaryCollection()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.SummaryCollectionImpl();
    }

    /**
     * Create an instance of VendorCriteria
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.VendorCriteria createVendorCriteria()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.VendorCriteriaImpl();
    }

    /**
     * Create an instance of SeverityList
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.SeverityList createSeverityList()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.SeverityListImpl();
    }

    /**
     * Create an instance of Facility
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.Facility createFacility()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.FacilityImpl();
    }

    /**
     * Create an instance of IntervalValue
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.IntervalValue createIntervalValue()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.IntervalValueImpl();
    }

    /**
     * Create an instance of CollectionIntervalValue
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.CollectionIntervalValue createCollectionIntervalValue()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.CollectionIntervalValueImpl();
    }

    /**
     * Create an instance of LastCollectionDate
     * 
     * @throws JAXBException if an error occurs
     */
    public com.perpetual.rp.util.jaxb.LastCollectionDate createLastCollectionDate()
        throws javax.xml.bind.JAXBException
    {
        return new com.perpetual.rp.util.jaxb.impl.LastCollectionDateImpl();
    }

    private static class GrammarInfoImpl
        extends com.perpetual.rp.util.jaxb.impl.runtime.AbstractGrammarInfoImpl
    {


        public java.lang.Class getDefaultImplementation(java.lang.Class javaContentInterface) {
            java.lang.Class c = null;
            try {
                c = java.lang.Class.forName(((java.lang.String) defaultImplementations.get(javaContentInterface.getName())));
            } catch (java.lang.Exception _x) {
                c = null;
            }
            return c;
        }

        public com.perpetual.rp.util.jaxb.impl.runtime.UnmarshallingEventHandler createUnmarshaller(java.lang.String uri, java.lang.String local, com.perpetual.rp.util.jaxb.impl.runtime.UnmarshallingContext context) {
            if (("HostList" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.HostListImpl().createUnmarshaller(context);
            }
            if (("Selected" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.SelectedImpl().createUnmarshaller(context);
            }
            if (("Facility" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.FacilityImpl().createUnmarshaller(context);
            }
            if (("IntervalValue" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.IntervalValueImpl().createUnmarshaller(context);
            }
            if (("SummaryCollection" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.SummaryCollectionImpl().createUnmarshaller(context);
            }
            if (("HostName" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.HostNameImpl().createUnmarshaller(context);
            }
            if (("VendorCriteria" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.VendorCriteriaImpl().createUnmarshaller(context);
            }
            if (("FacilityList" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.FacilityListImpl().createUnmarshaller(context);
            }
            if (("ServiceDomain" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.ServiceDomainImpl().createUnmarshaller(context);
            }
            if (("CollectionCriteria" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.CollectionCriteriaImpl().createUnmarshaller(context);
            }
            if (("ServiceDomainList" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.ServiceDomainListImpl().createUnmarshaller(context);
            }
            if (("LastCollectionDate" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.LastCollectionDateImpl().createUnmarshaller(context);
            }
            if (("VendorCriterion" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.VendorCriterionImpl().createUnmarshaller(context);
            }
            if (("RecordProcessorConfig" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.RecordProcessorConfigImpl().createUnmarshaller(context);
            }
            if (("Severity" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.SeverityImpl().createUnmarshaller(context);
            }
            if (("SeverityList" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.SeverityListImpl().createUnmarshaller(context);
            }
            if (("Host" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.HostImpl().createUnmarshaller(context);
            }
            if (("CollectionIntervalValue" == local)&&("" == uri)) {
                return new com.perpetual.rp.util.jaxb.impl.CollectionIntervalValueImpl().createUnmarshaller(context);
            }
            return null;
        }

        public java.lang.Class getRootElement(java.lang.String uri, java.lang.String local) {
            if (("HostList" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.HostListImpl.class);
            }
            if (("Selected" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.SelectedImpl.class);
            }
            if (("Facility" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.FacilityImpl.class);
            }
            if (("IntervalValue" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.IntervalValueImpl.class);
            }
            if (("SummaryCollection" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.SummaryCollectionImpl.class);
            }
            if (("HostName" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.HostNameImpl.class);
            }
            if (("VendorCriteria" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.VendorCriteriaImpl.class);
            }
            if (("FacilityList" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.FacilityListImpl.class);
            }
            if (("ServiceDomain" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.ServiceDomainImpl.class);
            }
            if (("CollectionCriteria" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.CollectionCriteriaImpl.class);
            }
            if (("ServiceDomainList" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.ServiceDomainListImpl.class);
            }
            if (("LastCollectionDate" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.LastCollectionDateImpl.class);
            }
            if (("VendorCriterion" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.VendorCriterionImpl.class);
            }
            if (("RecordProcessorConfig" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.RecordProcessorConfigImpl.class);
            }
            if (("Severity" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.SeverityImpl.class);
            }
            if (("SeverityList" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.SeverityListImpl.class);
            }
            if (("Host" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.HostImpl.class);
            }
            if (("CollectionIntervalValue" == local)&&("" == uri)) {
                return (com.perpetual.rp.util.jaxb.impl.CollectionIntervalValueImpl.class);
            }
            return null;
        }

        public boolean recognize(java.lang.String uri, java.lang.String local) {
            if (("HostList" == local)&&("" == uri)) {
                return true;
            }
            if (("Selected" == local)&&("" == uri)) {
                return true;
            }
            if (("Facility" == local)&&("" == uri)) {
                return true;
            }
            if (("IntervalValue" == local)&&("" == uri)) {
                return true;
            }
            if (("SummaryCollection" == local)&&("" == uri)) {
                return true;
            }
            if (("HostName" == local)&&("" == uri)) {
                return true;
            }
            if (("VendorCriteria" == local)&&("" == uri)) {
                return true;
            }
            if (("FacilityList" == local)&&("" == uri)) {
                return true;
            }
            if (("ServiceDomain" == local)&&("" == uri)) {
                return true;
            }
            if (("CollectionCriteria" == local)&&("" == uri)) {
                return true;
            }
            if (("ServiceDomainList" == local)&&("" == uri)) {
                return true;
            }
            if (("LastCollectionDate" == local)&&("" == uri)) {
                return true;
            }
            if (("VendorCriterion" == local)&&("" == uri)) {
                return true;
            }
            if (("RecordProcessorConfig" == local)&&("" == uri)) {
                return true;
            }
            if (("Severity" == local)&&("" == uri)) {
                return true;
            }
            if (("SeverityList" == local)&&("" == uri)) {
                return true;
            }
            if (("Host" == local)&&("" == uri)) {
                return true;
            }
            if (("CollectionIntervalValue" == local)&&("" == uri)) {
                return true;
            }
            return false;
        }

        public java.lang.String[] getProbePoints() {
            return new java.lang.String[] {"", "HostList", "", "Selected", "", "Facility", "", "IntervalValue", "", "SummaryCollection", "", "HostName", "", "VendorCriteria", "", "FacilityList", "", "ServiceDomain", "", "CollectionCriteria", "", "ServiceDomainList", "", "LastCollectionDate", "", "VendorCriterion", "", "RecordProcessorConfig", "", "Severity", "", "SeverityList", "", "Host", "", "CollectionIntervalValue"};
        }

    }

}
